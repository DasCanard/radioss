name: Publish to AUR

on:
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish to AUR'
        required: true
        type: string

jobs:
  publish-to-aur:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release tag
        if: github.event_name == 'workflow_run'
        id: get-latest-release
        run: |
          latest_tag=$(gh api repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "version=${latest_tag#v}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set version for manual dispatch
        if: github.event_name == 'workflow_dispatch'
        id: manual-version
        run: |
          echo "tag=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          version=${{ github.event.inputs.version }}
          echo "version=${version#v}" >> $GITHUB_OUTPUT

      - name: Set version variable
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "tag=${{ steps.get-latest-release.outputs.tag }}" >> $GITHUB_OUTPUT
            echo "version=${{ steps.get-latest-release.outputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ steps.manual-version.outputs.tag }}" >> $GITHUB_OUTPUT
            echo "version=${{ steps.manual-version.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Download release assets
        uses: robinraju/release-downloader@v1.11
        with:
          tag: ${{ steps.version.outputs.tag }}
          filename: "*"
          out-file-path: "assets"

      - name: Generate PKGBUILD for radioss
        run: |
          # Get DEB package info instead of AppImage
          DEB_FILE=$(find assets/ -name "*.deb" | head -1)
          DEB_NAME=$(basename "$DEB_FILE")
          DEB_SHA256=$(sha256sum "$DEB_FILE" | cut -d' ' -f1)
          DEB_URL="https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag }}/${DEB_NAME}"
          
          cat > PKGBUILD << EOF
          # Maintainer: ${{ secrets.AUR_USERNAME }} <${{ secrets.AUR_EMAIL }}>
          pkgname=radioss
          pkgver=${{ steps.version.outputs.version }}
          pkgrel=1
          pkgdesc="A modern, cross-platform internet radio player built with Tauri, React, and TypeScript"
          arch=('x86_64')
          url="https://github.com/${{ github.repository }}"
          license=('MIT')
          depends=('webkit2gtk' 'openssl')
          source_x86_64=("\${pkgname}-\${pkgver}.deb::${DEB_URL}")
          sha256sums_x86_64=('${DEB_SHA256}')
          
          package() {
              # Extract DEB package
              cd "\${srcdir}"
              ar x "\${pkgname}-\${pkgver}.deb"
              tar xf data.tar.*
              
              # Install binary
              install -Dm755 "usr/bin/radioss" "\${pkgdir}/usr/bin/radioss"
              
              # Install desktop entry if it exists
              if [ -f "usr/share/applications/radioss.desktop" ]; then
                  install -Dm644 "usr/share/applications/radioss.desktop" "\${pkgdir}/usr/share/applications/radioss.desktop"
              else
                  # Create desktop entry
                  install -Dm644 /dev/stdin "\${pkgdir}/usr/share/applications/radioss.desktop" << EOD
          [Desktop Entry]
          Name=Radioss
          Comment=A modern internet radio player
          Exec=radioss
          Icon=radioss
          Type=Application
          Categories=AudioVideo;Audio;Player;
          StartupNotify=true
          EOD
              fi
              
              # Install icon if it exists
              if [ -f "usr/share/icons/hicolor/256x256/apps/radioss.png" ]; then
                  install -Dm644 "usr/share/icons/hicolor/256x256/apps/radioss.png" "\${pkgdir}/usr/share/icons/hicolor/256x256/apps/radioss.png"
              fi
              
              # Install license
              install -Dm644 /dev/stdin "\${pkgdir}/usr/share/licenses/\${pkgname}/LICENSE" << EOL
          MIT License
          
          Copyright (c) 2024 richy
          
          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:
          
          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.
          
          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.
          EOL
          }
          EOF

      - name: Publish AUR package
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: radioss
          pkgbuild: ./PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: "Update to version ${{ steps.version.outputs.version }}"
          updpkgsums: true
          test: true
          allow_empty_commits: false
          force_push: false
          ssh_keyscan_types: rsa,ecdsa,ed25519 